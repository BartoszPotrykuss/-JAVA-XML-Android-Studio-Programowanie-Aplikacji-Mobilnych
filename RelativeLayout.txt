Pozwala on wyświetlać obsadzone w nim obiekty relatywnie do pozycji samego rozkładu (czyli rodzica) lub innych komponentów.
Atrybuty są typu boolean.
android:layout_alignParentTop = "true"
Zamiast Left i Right pisać Start i End.

Pozycjonując element względem innych widgetów musimy pamiętać o tym, że komponent względem, którego pozycjonujemy musi mieć
nadane id.


<RelativeLayout
    android:orientation="vertical"
    android:gravity="right"
    android:layout_width="match_parent"
    android:layout_height="match_parent">


       <ImageView
       android:gravity="center"
       android:layout_alignParentTop = "true"
       android:src="@drawable/abboudi"
       android:padding="10dp"
       android:layout_width="match_parent"
       android:layout_weight="1"
       android:layout_height="wrap_content"/>


        <TextView
        android:text="tekst"
        android:layout_alignParentBottom = "true"
        android:layout_alignParentLeft = "true"
        android:padding="10dp"
        android:textColor="#fff"
        android:background="#f8a"
        android:gravity="center"
        android:fontFamily="sans-serif-light"
        android:textSize="36sp"
        android:layout_weight="2"
        android:layout_width="180dp"
        android:layout_height="wrap_content"/>


       <Button
       android:text="button"
       android:layout_alignParentRight = "true"
       android:layout_alignParentBottom = "true"
       android:gravity="center"
       android:background="#f00"
       android:layout_weight="2"
       android:padding="10dp"
       android:textSize="36sp"
       android:textColor="#fff"
       android:layout_width="180dp"
       android:layout_height="wrap_content"/>

</RelativeLayout>